{"name":"Future-runnable","tagline":"Exemplo de concorrência utilizando a API Future.","body":"future-runnable\r\n===============\r\n\r\nA ideia desse projeto era tornar mais fácil a execução de métodos em multthreads.\r\n\r\nP.s: Este projeto é apenas uma simulação da ideia. Caso você tenha algo a contribuir utilize a sessão de Issues para enviar a sua sugestão.\r\n\r\n# Próximos Passos:\r\n\t\r\n1. Organizar o projeto considerando todos os cenários de teste;\r\n2. Criar integração com frameworks de injeção CDI e Spring;\r\n3. Criar eventos que permita você definir o momento dele ser executado;\r\n4. Execução de métodos com recebimentos de parâmetros e anotificações assíncronas do momento de conclusão ou até mesmo de um determinado evento.\r\n\r\n# Usando\r\n\r\nVocê deverá colocar a anotação @Runnable em cima do método que deve ser executado.\r\n\r\nExemplo: \r\n\r\n\r\n    @Runnable\r\n\tpublic void executar() {\r\n\t\tfor(int i = 0; i< 100;i++) {\r\n\t\t\tSystem.out.println(\"Running: \" + i);\r\n\t\t}\r\n\t}\r\n\r\n\r\nE para inicializar o scanner que tem como objetivo localizar todos os métodos que utilizam esta anotação você deverá inicializar instanciando a classe Scanner.\r\n\r\nExemplo: \r\n\r\n    public static void main(String[] args)  {\r\n\t\t    new Scanner();\r\n    }   \r\n\t\r\n\t\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}